{"version":3,"sources":["components/searchBar.js","App.js","index.js"],"names":["SearchBar","useState","myOptions","setMyOptions","moviesList","setMoviesList","recMovies","setRecMovies","twitterId","setTwitterId","genre","setGenre","loading","setLoading","valueRef","useRef","twitterIdRef","useEffect","tempArr","fetch","then","Response","json","res","map","movie","push","title","console","log","getDataFromAPI","filterOptions","createFilterOptions","matchFrom","limit","className","id","Autocomplete","style","width","freeSolo","autoComplete","autoHighlight","options","renderInput","params","TextField","onChange","variant","label","inputRef","index","onClick","tempArr1","addMovie","current","value","split","trim","type","e","target","placeholder","payload","selectedMovies","Axios","post","data","predictedGenre","color","height","radius","margin","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.5a403a2d.chunk.js","sourcesContent":["import React, { useState, useEffect, useRef } from \"react\";\r\nimport { TextField } from \"@material-ui/core\";\r\nimport Autocomplete, {\r\n  createFilterOptions,\r\n} from \"@material-ui/lab/Autocomplete\";\r\nimport Axios from \"axios\";\r\nimport ScaleLoader from \"react-spinners/ScaleLoader\";\r\n\r\nconst SearchBar = () => {\r\n  const [myOptions, setMyOptions] = useState([]);\r\n  const [moviesList, setMoviesList] = useState([]);\r\n  const [recMovies, setRecMovies] = useState([]);\r\n  const [twitterId, setTwitterId] = useState(\"\");\r\n  const [genre, setGenre] = useState([]);\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  const valueRef = useRef(\"\");\r\n  const twitterIdRef = useRef(\"\");\r\n\r\n  const sendValue = () => {\r\n    setLoading(true);\r\n    setRecMovies(() => []);\r\n    setGenre(() => []);\r\n    let payload = { selectedMovies: moviesList, twitterId: twitterId };\r\n    console.log(\"payload => \", payload);\r\n    Axios.post(\"http://localhost:5000/getrec\", payload).then((Response) => {\r\n      setRecMovies([...Response.data.moviesList]);\r\n      setGenre([...Response.data.predictedGenre]);\r\n      setLoading(false);\r\n      console.log(Response.data);\r\n    });\r\n    // console.log(recMovies);\r\n  };\r\n\r\n  const addMovie = (movie) => {\r\n    let tempArr1 = moviesList;\r\n    tempArr1.push(movie);\r\n    setMoviesList([...tempArr1]);\r\n    console.log(moviesList);\r\n  };\r\n\r\n  const clearSelection = () => {\r\n    setMoviesList([]);\r\n    setRecMovies([]);\r\n    setTwitterId(\"\");\r\n    setGenre([]);\r\n    console.log(moviesList);\r\n  };\r\n\r\n  useEffect(() => {\r\n    let tempArr = [];\r\n    fetch(\"http://localhost:5000/list\")\r\n      .then((Response) => Response.json())\r\n      .then((res) => {\r\n        res.map(function (movie) {\r\n          return tempArr.push(movie.title);\r\n        });\r\n      });\r\n    setMyOptions(tempArr);\r\n    console.log(setMyOptions);\r\n  }, []);\r\n\r\n  const getDataFromAPI = () => {\r\n    setMyOptions(myOptions);\r\n  };\r\n\r\n  const filterOptions = createFilterOptions({\r\n    matchFrom: \"any\",\r\n    limit: 500,\r\n  });\r\n\r\n  return (\r\n    <div>\r\n      <div className=\"centerBox\">\r\n        <div className=\"searchBarBox\">\r\n          <div className=\"container\">\r\n            <div className=\"row\">\r\n              <div className=\"col\">\r\n                <h4 id=\"enter_label\">Enter your favorite films</h4>\r\n                <Autocomplete\r\n                  style={{ width: 300 }}\r\n                  freeSolo\r\n                  filterOptions={filterOptions}\r\n                  autoComplete\r\n                  autoHighlight\r\n                  options={myOptions}\r\n                  renderInput={(params) => (\r\n                    <TextField\r\n                      {...params}\r\n                      onChange={getDataFromAPI}\r\n                      variant=\"outlined\"\r\n                      label=\"Search Box\"\r\n                      inputRef={valueRef}\r\n                      className=\"searchBar\"\r\n                    />\r\n                  )}\r\n                />\r\n              </div>\r\n              <div className=\"d-flex\">\r\n                {moviesList.map((movie, index) => (\r\n                  <p key={index} id=\"movie_box\">\r\n                    {movie}\r\n                  </p>\r\n                ))}\r\n              </div>\r\n            </div>\r\n            <button\r\n              onClick={() => {\r\n                addMovie(valueRef.current.value.split(\"(\")[0].trim());\r\n              }}\r\n              id=\"addButton\"\r\n              className=\"btn btn-primary btn-lg\"\r\n            >\r\n              Add\r\n            </button>\r\n            <button\r\n              onClick={clearSelection}\r\n              id=\"clearButton\"\r\n              className=\"btn btn-danger btn-lg\"\r\n            >\r\n              Clear\r\n            </button>\r\n          </div>\r\n          <div className=\"container\">\r\n            <input\r\n              type=\"text\"\r\n              inputRef={twitterIdRef}\r\n              value={twitterId}\r\n              onChange={(e) => setTwitterId(e.target.value)}\r\n              id=\"tidBox\"\r\n              placeholder=\"Twitter ID\"\r\n              className=\"mr-2\"\r\n            />\r\n            <button\r\n              onClick={sendValue}\r\n              id=\"sendButton\"\r\n              className=\"btn btn-warning btn-lg\"\r\n              type=\"submit\"\r\n            >\r\n              Generate\r\n            </button>\r\n          </div>\r\n          <center>\r\n            <ScaleLoader\r\n              color=\"#36D7B7\"\r\n              loading={loading}\r\n              height={50}\r\n              width={8}\r\n              radius={4}\r\n              margin={4}\r\n            />\r\n          </center>\r\n          <div className=\"container\">\r\n            <div className=\"row\">\r\n              {genre.map((genre, index) => (\r\n                <p key={index} id=\"genre_box\">\r\n                  {genre}\r\n                </p>\r\n              ))}\r\n            </div>\r\n          </div>\r\n\r\n          <div className=\"container\">\r\n            <div className=\"row\">\r\n              {recMovies.map((movie, index) => (\r\n                <p key={index} id=\"rec_movie_box\">\r\n                  {movie}\r\n                </p>\r\n              ))}\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SearchBar;\r\n","import SearchBar from \"./components/searchBar\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <SearchBar />\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}